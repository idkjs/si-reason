// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as $$Array from "rescript/lib/es6/array.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var iList = {
  hd: 0,
  tl: {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }
};

var ijList = List.flatten(List.map((function (i) {
            return List.map((function (j) {
                          return [
                                  i,
                                  j
                                ];
                        }), iList);
          }), iList));

var ijkList = List.flatten(List.map((function (param) {
            var j = param[1];
            var i = param[0];
            return List.map((function (k) {
                          return [
                                  i,
                                  j,
                                  k
                                ];
                        }), iList);
          }), ijList));

var emptyState = Caml_array.make(4, Caml_array.make(4, Caml_array.make(4, undefined)));

function winner(state) {
  var allPairs = List.filter(function (param) {
          var match = param[1];
          var y2 = match[2];
          var x2 = match[1];
          var z2 = match[0];
          var match$1 = param[0];
          var y1 = match$1[2];
          var x1 = match$1[1];
          var z1 = match$1[0];
          if (z1 !== z2 || x1 !== x2 || y1 !== y2) {
            return List.for_all((function (d) {
                          return d % 3 === 0;
                        }), {
                        hd: z1 - z2 | 0,
                        tl: {
                          hd: x1 - x2 | 0,
                          tl: {
                            hd: y1 - y2 | 0,
                            tl: /* [] */0
                          }
                        }
                      });
          } else {
            return false;
          }
        })(List.flatten(List.map((function (param) {
                  var y1 = param[2];
                  var x1 = param[1];
                  var z1 = param[0];
                  return List.map((function (param) {
                                return [
                                        [
                                          z1,
                                          x1,
                                          y1
                                        ],
                                        [
                                          param[0],
                                          param[1],
                                          param[2]
                                        ]
                                      ];
                              }), ijkList);
                }), ijkList)));
  var interpolate = function (a, b, i) {
    return Math.imul((b - a | 0) / 3 | 0, i) + a | 0;
  };
  var allPositionsForPair = function (param) {
    var match = param[1];
    var y2 = match[2];
    var x2 = match[1];
    var z2 = match[0];
    var match$1 = param[0];
    var y1 = match$1[2];
    var x1 = match$1[1];
    var z1 = match$1[0];
    return List.map((function (i) {
                  return [
                          interpolate(z1, z2, i),
                          interpolate(x1, x2, i),
                          interpolate(y1, y2, i)
                        ];
                }), iList);
  };
  var checkWinner = function (p, param) {
    var match = param[1];
    var match$1 = param[0];
    return List.for_all((function (el) {
                  return Caml_obj.caml_equal(el, p);
                }), List.map((function (param) {
                      return Caml_array.get(Caml_array.get(Caml_array.get(state, param[0]), param[1]), param[2]);
                    }), allPositionsForPair([
                        [
                          match$1[0],
                          match$1[1],
                          match$1[2]
                        ],
                        [
                          match[0],
                          match[1],
                          match[2]
                        ]
                      ])));
  };
  var match = List.exists((function (param) {
          return checkWinner(/* P1 */0, param);
        }), allPairs);
  var match$1 = List.exists((function (param) {
          return checkWinner(/* P2 */1, param);
        }), allPairs);
  if (match) {
    if (match$1) {
      return ;
    } else {
      return [
              /* P1 */0,
              allPositionsForPair(List.find((function (param) {
                          return checkWinner(/* P1 */0, param);
                        }), allPairs))
            ];
    }
  } else if (match$1) {
    return [
            /* P2 */1,
            allPositionsForPair(List.find((function (param) {
                        return checkWinner(/* P2 */1, param);
                      }), allPairs))
          ];
  } else {
    return ;
  }
}

function isFull(state) {
  return List.for_all((function (param) {
                return Caml_array.get(Caml_array.get(Caml_array.get(state, 3), param[0]), param[1]) !== undefined;
              }), ijList);
}

function isEnd(state) {
  if (winner(state) !== undefined) {
    return true;
  } else {
    return isFull(state);
  }
}

function isValidMove(param, state) {
  if (isEnd(state)) {
    return false;
  } else {
    return Caml_array.get(Caml_array.get(Caml_array.get(state, 3), param[0]), param[1]) === undefined;
  }
}

function move(param, player, state) {
  var y = param[1];
  var x = param[0];
  if (!isValidMove([
          x,
          y
        ], state)) {
    return state;
  }
  var putPieceOnLayer = function (param, player, layer) {
    var newLayer = $$Array.map($$Array.copy, layer);
    Caml_array.set(Caml_array.get(newLayer, param[0]), param[1], Caml_option.some(player));
    return newLayer;
  };
  return $$Array.fold_left((function (param, layer) {
                  var hasPlaced = param[1];
                  var curState = param[0];
                  if (!hasPlaced && Caml_array.get(Caml_array.get(layer, x), y) === undefined) {
                    return [
                            $$Array.append(curState, [putPieceOnLayer([
                                        x,
                                        y
                                      ], player, layer)]),
                            true
                          ];
                  } else {
                    return [
                            $$Array.append(curState, [layer]),
                            hasPlaced
                          ];
                  }
                }), [
                [],
                false
              ], state)[0];
}

var numRows = 4;

export {
  numRows ,
  iList ,
  ijList ,
  ijkList ,
  emptyState ,
  winner ,
  isFull ,
  isEnd ,
  isValidMove ,
  move ,
  
}
/* ijList Not a pure module */
