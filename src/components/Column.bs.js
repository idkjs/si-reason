// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as $$Array from "rescript/lib/es6/array.js";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Bead$SiReason from "./Bead.bs.js";
import * as Util$SiReason from "../util.bs.js";
import * as Board$SiReason from "../board.bs.js";

function Column(Props) {
  var board = Props.board;
  var x = Props.x;
  var y = Props.y;
  var tryMove = Props.tryMove;
  var winner = Props.winner;
  return React.createElement("div", {
              className: Util$SiReason.cx({
                    hd: [
                      "Column",
                      true
                    ],
                    tl: {
                      hd: [
                        "Column--canMove",
                        Board$SiReason.isValidMove([
                              x,
                              y
                            ], board)
                      ],
                      tl: /* [] */0
                    }
                  }),
              onClick: tryMove
            }, $$Array.mapi((function (i, el) {
                    var winning = winner !== undefined && List.exists((function (pos) {
                            return Caml_obj.caml_equal(pos, [
                                        i,
                                        x,
                                        y
                                      ]);
                          }), winner[1]) ? true : false;
                    if (el !== undefined) {
                      if (el) {
                        return React.createElement(Bead$SiReason.make, {
                                    player: /* P2 */1,
                                    winning: winning,
                                    key: String(i)
                                  });
                      } else {
                        return React.createElement(Bead$SiReason.make, {
                                    player: /* P1 */0,
                                    winning: winning,
                                    key: String(i)
                                  });
                      }
                    } else {
                      return null;
                    }
                  }), $$Array.map((function (layer) {
                        return Caml_array.get(Caml_array.get(layer, x), y);
                      }), board)));
}

var make = Column;

export {
  make ,
  
}
/* react Not a pure module */
